const BASE = "http://localhost:5000/api/v1.0/";
const ID_KEY = "identity";

/**
 * @brief enroll user in system
 * @param lts_id LTS unique id
 * @param success function returns the secret generated by backend
 * @param error function returns any error result
 */
function enroll(lts_id, success, error) {
    const payload = {
        'lts_id' : lts_id,
        'secret' : ''
    };
    $.ajax({
        type: 'POST',
        url: BASE + 'enroll?' + $.param(payload),
        success: function (data) {
            console.debug("Secret: " + JSON.stringify(data));
            success(data);
        },
        error: function (data) {
            error(data);
        }
    });
}

/**
 * @brief Fetch the stats of specified user
 * @param student_id LTS unique id for user
 * @param secret authorization token to prevent impersonation
 * @param callback callback receives fetched data
 * @param err callback receives raw ajax error
 */
function fetchStats(student_id, secret, callback, err) {
    scrapeCoursePageInfo(function(courseInfo) {
        const payload = {
            'lts_id': student_id,
            'secret': secret,
            'course_id': courseInfo['courseid']
        };
        $.ajax({
            type: 'GET',
            url: BASE + 'stats?' + $.param(payload),
            success: function (data) {
                callback(data);
            },
            error: function (data) {
                err(data);
            },
            complete: function () {
                $('#spinner').hide();
            }
        });
    });
}

/**
 * @brief Send course info to server, we don't care what happens
 * @param student_id for auth
 * @param secret for auth
 */
function addCourse(student_id, secret) {
    scrapeCoursePageInfo(function(courseInfo) {
        const payload = {
            'lts_id' : student_id,
            'secret' : secret,
            'course_id' : courseInfo['courseid'],
            'course_name' : courseInfo['coursename']
        };
        $.ajax({
            type: 'POST',
            url: BASE + 'addcourse?' + $.param(payload)
        });
    });
}

/**
 * @brief Build an HTML data containing stats data
 * @param classes dictionary containing stats
 * @returns {*|jQuery|HTMLElement}
 */
function makeOverviewTable(classes) {

    var $table = $('<table/>');
    $table.append('<tr>' +
    '<th> Course </th>' +
    '<th> Today </th>' +
    '<th> This Week </th>' +
    '<th> Last Week </th>' +
    '<th> All Time </th>' +
    '</tr>');
    $table.addClass('bordered');

    for(const k in classes){

        var key = k;
        var data = classes[key];

        if(data.archived) {
            key = k +  '<span class="badge new" data-badge-caption="Archived"></span>'
        }

        $table.append( '<tr>' +
            '<td>' + key + '</td>' +
            '<td>' + data.today_posts + '</td>' +
            '<td>' + data.this_week_posts + '</td>' +
            '<td>' + data.prev_week_posts + '</td>' +
            '<td>' + data.total_posts + '</td>' +
            '</tr>');
    }
    return $table;
}

/**
 * @brief Generate a pretty pie chart using Canvas JS
 * @param data to plot as pie
 * @param ctx HTML canvas handle
 */
function makePieCharts(data, ctx) {
    var backgroundColors = [
                'rgba(84,48,5, 0.9)',
                'rgba(140,81,10, 0.9)',
                'rgba(191,129,45, 0.9)',
                'rgba(223,194,125, 0.9)',
                'rgba(128,205,193, 0.9)',
                'rgba(53,151,143, 0.9)',
                'rgba(1,102,94, 0.9)'
            ];
    var options = {
        cutoutPercentage: 50,
        hoverBorderWidth: [2, 2, 2, 2, 2, 2, 2],
        hoverBorderColor: backgroundColors,
        legend : {
            position : 'left'
        }
    };
    var pieData = {
        labels: ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"],
        datasets: [{
            label: 'Posts by Day',
            data: data.weekday_posts_list,
            backgroundColor: backgroundColors,
            borderWidth: 1
        }]
    };

    var pie = new Chart(ctx, {
        type: 'pie',
        data: pieData,
        options: options
    });

}

/**
 * @brief Generate a sub-table for the minutia of patterns
 * @param data to parse
 * @return HTML table
 */
function makeSubTable(data) {
 var $table = $('<table>');
    $table.append('<tr>' +
    '<th> Characteristic </th>' +
    '<th> Assessment </th>' +
    '</tr>');
    $table.addClass('bordered');
    var avg_len = data.total_words_posted / data.total_posts;
    $table.append('<tr><td>Avg. Words Per Post</td><td>'+ avg_len.toFixed(3) +'</td></tr>');
    $table.append('<tr><td>Avg. Days Between Posts</td><td>'+ data.days_apart_avg +'</td></tr>');
    $table.append('<tr><td>Avg. Objectivity</td><td>'+ data.obj_subj +'</td></tr>');
    $table.append('<tr><td>Favorite Day</td><td>'+ data.favorite_day +'</td></tr>');
    $table.append('</table>');
    return $table;
}

/**
 * @brief Build an HTML div containing pattern data
 * @param classes dictionary containing stats
 * @returns {*|jQuery|HTMLElement}
 */
function makePatternDiv(classes) {

    var $patternDiv = $('<div/>');
    var pieBox = $("#mmm-pie");
    var count = 0;
    for(const k in classes){

        var id = 'mmm-pie' + count++;
        var ctx = $('<canvas id="' + id + '"></canvas>');
        pieBox.append(ctx);

        var data = classes[k];

        $patternDiv.append( '<h4>' + k  + '</h4>');
        $patternDiv.append(makeSubTable(data));
        makePieCharts(data, ctx);
    }
    return $patternDiv;
}

/**
 * @brief Create a greeting based on current time
 * @returns {{phrase: string, title: string}}
 */
function makeGreeting() {
    var now = new Date();
    var tod = "";

    // After 3am and before noon is morning
    if(now.getHours() > 3 && now.getHours() < 12) {
        tod = "morning";
    } else if(now.getHours() < 17) {
        // before 5pm is afternoon
        tod = "afternoon";
    } else {
        tod = "evening";
    }

    return {
        phrase: "Good " + tod,
        title: document.title
    };
}

/**
 * @brief Handles fetching remote data and building out UI
 * @param identity Piazza identity string in format user|secret
 * @param err callback function receives raw AJAX error
 */
function setGreeting(identity, err) {

    const student_id = identity[ID_KEY].split('|')[0];
    const secret = identity[ID_KEY].split('|')[1];

    addCourse(student_id, secret);

    fetchStats(student_id, secret, function (courseData) {

        var username = (typeof courseData.nickname === 'undefined') ? '' : ', ' + courseData.nickname;
        var info = makeGreeting();

        var num = 0;
        var sent_container = $("#sentiment-container");
        for(const k in courseData){
            sent ='<div>' +
                    '<div class="row valign-wrapper">' +
                      '<div class="col s3">' +
                        '<span>' + k + '</span>' +
                      '</div>'+
                      '<div class="col s9">' +
                        '<span class="black-text">' +
                           '<p>Highest Sentiment: ' + courseData[k].most_positive_date + '</p>' +
                           '<p>Lowest Sentiment: ' + courseData[k].most_negative_date + '</p>' +
                        '</span>' +
                      '</div>' +
                    '</div>' +
                    '<div class="tone-gradient' + num + ' row">' +
                        '<div class="col s6"><h5 class="left-align text-overlay"></h5></div>' +
                    '</div>' +
                   '</div>';
            addStyleString('.tone-gradient' + num++ + ' { ' + courseData[k].sentiment_css + '}');
            sent_container.append(sent);
        }

        $(".greeting").text(info.phrase + username);

        var main_content = $('#main-content');
        main_content.show();
        main_content.empty().append('<span class="gray-text text-darken-2">Your Piazza Posts</span>');

        if(Object.keys(courseData).length > 0) {

            $('#engagement').append(makeOverviewTable(courseData));
            $('#quality').append(makePatternDiv(courseData));

        } else if (retry > 0) {
            console.info("Class data is not yet ready");
            main_content.empty().append('<span class="gray-text text-darken-2">Class data is not yet ready</span>');
        }
    }, err);
}

/**
 * @brief Identify the course by looking at the URL and tab name
 * @details this will fail if you are debugging so the else clause
 *  returns mock data. Fitting :)
 * @param callback to pass scraped info to
 */
function scrapeCoursePageInfo(callback) {
     chrome.tabs.query({'active': true, 'lastFocusedWindow': true}, function (tabs) {
         var activeTab = tabs[0];
         if (activeTab) {
             var title = activeTab.title;
             var url = activeTab.url;

             var courseName = title.split('(')[0];
             var courseId = url.split('/')[4];
             if(courseId.indexOf('?') >= 0) {
                 courseId = courseId.split('?')[0];
             }
             console.debug("Course Info: " + courseName, courseId);
             callback({'coursename' : courseName, 'courseid' : courseId });
         } else {
             console.info("Failed to get course data from current tab, using mock data");
             callback({'coursename' : 'OMS CS6460', 'courseid' : 'j6azklk4gaf4v9' });
         }
     });
}

/**
 * @brief Get user id from Piazza token then go ask our backend
 * for a secret
 */
function identifyUser(success, error) {
    chrome.cookies.get({"url": "https://piazza.com", "name": "last_piaz_user"}, function (student_id) {
        enroll(student_id.value, function (data) {
            var identity = {};
            identity[ID_KEY] = student_id.value + '|' + data['keep_this'];

            chrome.storage.sync.set(identity, function() {
                if(chrome.runtime.error) {
                    console.info("Failed to store identity");
                    error(chrome.runtime.error);
                } else {
                    success(identity, error);
                }
            });
        }, error);
    });
}

/**
 * @brief inject arbitrary css
 * @param str css to inject
 */
function addStyleString(str) {
    var node = document.createElement('style');
    node.innerHTML = str;
    document.body.appendChild(node);
}

/**
 * On DOM load, begin the authorization process
 */
function initApp() {

    $('#spinner').show();

    function initErr(error) {
        $(".greeting").text("Ooops, something went wrong");
        console.log(JSON.stringify(error));
    }

    chrome.storage.sync.get(ID_KEY, function(identity) {
        if (!chrome.runtime.error) {
            if(Object.keys(identity).length === 0) {
                console.debug("Creating new user");
                identifyUser(setGreeting, initErr);
            } else {
                console.debug("Using current identity");
                setGreeting(identity, initErr);
            }
        } else {
            $(".greeting").text("Ooops, I couldn't retrieve your token");
            console.error(chrome.runtime.error);
        }
    });
}

window.onload = function() {
    // TODO on uninstall we need to purge from our database somehow... hmm.
    //chrome.runtime.setUninstallURL(BASE);
    initApp()
};